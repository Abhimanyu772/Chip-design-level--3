Section 1: Communication with computers
Location of the package in an arduino board.
(lecture videos)

image

The above picture is a picture of an aurdino board. The circled area is known as a package and is what this course is going to be about.

(lecture videos)

image

This picture is a simplified version of the aurdino board.

image

This image shows what we get if we zoom into the circled area (package) shown in the first diagram.

The pins are what connects the logic in the chip to the external world.
The pads are what the connections have to pass through to get to the chip.
The foundry IP's are components made in a foundry.
Conversion of programs to actual hardware that can perform the code written in the programs.
(lecture videos)

image

The C-language code is first compiled into assembly language which in our case is RISC-V
This assembly language is implemented uding Hardware Description Language (HDL) which is picorv32a in our case.
This is then converted to machine language which is binary in the real world.
Coordination between Hardware and Software
(lecture videos)

image

All your applications are installed on your Operating System (OS). The applications are essentially code that is in a high level language like java or C.
The compiler is a part of your sysem software that converts the highlevel languages our applications are programmed in to a set of simpler instructions in an executable (.exe) file.
The syntax of these instructions are dependent on your hardware.
The assembler then converts these instructions to assembly level language aka. binary (1's and 0's) that the hardware can then implement.
All the compilers and assemblers etc. that help convert the C program to binary is known to be the Instruction Set Architecture (ISA) of the computer.
Section 2: SoC design and OpenLANE
Requirements of Open Source ASIC Design
Hardware Description Language and RTL IP's (github.com, opencores.org, librecores.org)
Electron Design Automation (EDA) tools. (qflow, OpenROAD, OpenLANE)
PDK data (Google and Skywaters open source 130nm PDK)
In 1979, chip making was separated into design and fabrication. So Pure Play Fabs (only fabrication no design) and Fabless (only design nd no fabrication) emerged.
The interface bbetween the fabricators and the designers was knwn as the PDK.
(lecture videos)

image

Process Design Kit (PDK)
A Process Design Kit (PDK) is a collection of files used to model the specific fabrication process for the EDA tools used to design an integrated circuit (IC).
The PDK contains information about the available logic cells, routing rules and device parameters for a particular chip fabrication process.
(lecture videos)

image

Simplified ASIC (RTL to GDSII) Flow
Synthesis: This stage converts the HDL code (e.g., Verilog) into a gate-level netlist. The netlist represents the circuit's functionality using basic logic gates.
(lecture videos)

image

Floor and Power Planning: In this stage, the chip layout is planned. The die area is divided into sections for different functional blocks and I/O pads. The power supply network is also designed to ensure proper power distribution throughout the chip.

Placement: This stage involves positioning the logic cells from the netlist onto the chip layout. The goal is to find optimal locations for the cells considering factors like timing and area constraints. There are two main placement steps:

Global placement: This provides an initial placement for all cells, aiming for optimal positions but not necessarily following all layout rules. The placement in this step may not always be legal.
Detailed placement: This refines the initial placement to ensure all cells adhere to the design rules.
(lecture videos)

image

(lecture videos)

image

Clock Tree Synthesis (CTS): A clock tree is a network of buffers and wires that distributes the clock signal to all sequential elements (flip-flops) in the design. CTS aims to minimize clock skew, which is the variation in arrival time of the clock signal at different flip-flops.

Routing: This stage involves creating connections between the placed cells using metal layers available in the fabrication process. Routing is typically done in two steps:

Global routing: This defines the general paths for the connections between cells.
Detailed routing: This implements the actual wiring connections based on the global routing plan.
Sign-off: This stage involves various checks to ensure the design meets the desired functionality and manufacturing requirements. Here are some common sign-off checks:
Design Rule Checking (DRC): This verifies if the layout adheres to the design rules specified by the PDK for the fabrication process.
Layout vs Schematic (LVS): This compares the final layout with the original gate-level netlist to ensure they are equivalent.
Static Timing Analysis (STA): This analyzes the timing delays in the design to ensure all signals meet the timing constraints and the circuit operates at the required frequency.
(lecture videos)

image

Introduction to OpenLANE and StriVe

OpenLANE is an open-source design flow that aims to automate the entire process of generating a GDSII file from an RTL design, without requiring manual intervention.

StriVe is a collection of open-source resources for SoC design, including open PDKs, EDA tools, and RTL examples.

It provides features like Design Space Exploration to help find optimal design configurations and offers a growing collection of design examples (43 and growing).

Versions:

(lecture videos)

image

OpenLANE ASIC Design Flow:
(lecture videos)

image

Section 3: Introduction to Opem Source EDA tools
General Linux Commands
cd- Change directory

ls- Lists files and directories present in working directory.

pwd- Prints the current working directory.

mkdir- Makes a new directory.

cp- Copy.

tar- Archive file commands.

# Change directory to the openlane folder that contains the pdk's designs's etc.
cd Desktop/work/tools/openlane_working_dir/openlane/
image

docker
image

# The flow uses the script in flow.tcl
# The -interactive tag lest the flow run step by step instead of all at once as it normally would.
./flow.tcl -interactive
image

# Load the required packages required for the flow
package require openlane 0.9
image

# prepare the picorv32a design for synthesis
# This step also merges lef files
prep -design picorv32a
image

merged.lef created by our previous command in /Desktop/work/tools/openlane_working_dir/openlane/designs/picorv32a/runs/30-01_17-13/tmp

image

Open by running the following commands in a new tab

cd /Desktop/work/tools/openlane_working_dir/openlane/designs/picorv32a/runs/30-01_17-13/tmp
# Opening merged.lef file
less merged.leff
image

# Run synthesis
run_synthesis
image

Screenshot of synthesis executed sucessfully.

image

OpenLANE Docs

Our next step is to calculate the flop ratio which is The no. of D Flip Flops / Total no. of cells

image

No. of D Flip Flops = sky130_fd_sc_hd__dfxtp_2 = 1613

Total no of cells = Number of cells: = 14876

Flop ratio = 1613 / 14876 = 0.10842968539

In % Flop ratio = 10.842968539

Synthesised netlist in /Desktop/work/tools/openlane_working_dir/openlane/designs/picorv32a/runs/30-01_17-13/results/synthesis

cd /Desktop/work/tools/openlane_working_dir/openlane/designs/picorv32a/runs/30-01_17-13/results/synthesis
image

less picorv32a.synthesis.v
image

Screenshot of report in /Desktop/work/tools/openlane_working_dir/openlane/designs/picorv32a/runs/30-01_17-13/reports/synthesis folder.

cd /Desktop/work/tools/openlane_working_dir/openlane/designs/picorv32a/runs/30-01_17-13/reports/synthesis
# After this use the `less` commandto view the reports.

